diff --git a/drivers/net/wireless/marvell/mwifiex/pcie.c b/drivers/net/wireless/marvell/mwifiex/pcie.c
index 9511f5fe62f4..76f7f1b1735f 100644
--- a/drivers/net/wireless/marvell/mwifiex/pcie.c
+++ b/drivers/net/wireless/marvell/mwifiex/pcie.c
@@ -1913,7 +1913,6 @@ static int mwifiex_pcie_event_complete(struct mwifiex_adapter *adapter,
 {
 	struct pcie_service_card *card = adapter->card;
 	const struct mwifiex_pcie_card_reg *reg = card->pcie.reg;
-	int ret = 0;
 	u32 rdptr = card->evtbd_rdptr & MWIFIEX_EVTBD_MASK;
 	u32 wrptr;
 	struct mwifiex_evt_buf_desc *desc;
@@ -1972,11 +1971,7 @@ static int mwifiex_pcie_event_complete(struct mwifiex_adapter *adapter,
 		return -1;
 	}
 
-	mwifiex_dbg(adapter, EVENT,
-		    "info: Check Events Again\n");
-	ret = mwifiex_pcie_process_event_ready(adapter);
-
-	return ret;
+  return 0;
 }
 
 /* Combo firmware image is a combination of
@@ -2784,6 +2779,11 @@ static void mwifiex_pcie_card_reset_work(struct mwifiex_adapter *adapter)
 	/* We can't afford to wait here; remove() might be waiting on us. If we
 	 * can't grab the device lock, maybe we'll get another chance later.
 	 */
+  if (mwifiex_write_reg(adapter, PCIE_CPU_INT_EVENT,
+              CPU_INTR_RESET)) {
+    mwifiex_dbg(adapter, ERROR,
+            "failed to assert cpu reset interrupt.\n");
+  }
 	pci_try_reset_function(card->dev);
 }
 
